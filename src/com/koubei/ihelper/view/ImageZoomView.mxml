<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas  xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:flash.filters="flash.filters.*"     
    horizontalScrollPolicy="off" 
    verticalScrollPolicy="off"
    mouseWheel="onMouseWheel(event)" 
    creationComplete="onCreationComplete()">
    
    <mx:Script>
    <![CDATA[

        import mx.core.FlexGlobals;
        import mx.utils.Base64Encoder;
        
        public static const EVENT_SCALE_UPDATED:String = "scaleUpdated";
        
        [Bindable]public var minScale:Number = .02;
        
        [Bindable]public var zoomDuration:Number = 500;
        
        [Bindable]public var zoomEasingFunction:Function = null;
        
        [Bindable]public var moveDuration:Number = 500;
        
        [Bindable]public var moveEasingFunction:Function = null;
        
        [Bindable]public var fadeDuration:Number = 500;
        
        [Bindable]public var fadeEasingFunction:Function = null;
        
        public var zoomIncrement:Number = .05;
        public var mouseWheelEnabled:Boolean = true;
        public var mouseFollow:Boolean = true;
        public var imageDoubleClickEnabled:Boolean = true;
        
        private    var _borderSize:Number = 50;
        private var _isAnimating:Boolean = false;
                
        [Bindable]private var _source:Object = null;
        
        private function onCreationComplete():void 
        {
            FlexGlobals.topLevelApplication.addEventListener(MouseEvent.MOUSE_UP, onApplicationMouseUp);
        }
        
        private function onApplicationMouseUp(event:MouseEvent):void 
        {
            image.stopDrag();
        }
        
        private function onMouseWheel(event:MouseEvent):void 
        {
            if ( mouseWheelEnabled )
                eventZoom(event.delta);
        }
        
        private function onDoubleClick():void 
        {
            if ( imageDoubleClickEnabled )
                eventZoom(3);
        }
        
        private function eventZoom(increment:Number):void 
        {
            if ( _source )
            {
                if( mouseFollow )
                {
                    zoomEffect.originX = image.mouseX;
                    zoomEffect.originY = image.mouseY;                    
                }
                else
                {
                    setDefaultRegistrationPoint();
                }
                zoom(image.scaleX + increment * zoomIncrement);
            }
        }
        
        private function setDefaultRegistrationPoint():void 
        {
            zoomEffect.originX = image.width/2;
            zoomEffect.originY = image.height/2;
        }
        
        public function reset():void
        {
            moveEffect.xTo = (this.width - image.contentWidth)/2;
            moveEffect.yTo = (this.height - image.contentHeight)/2;
            moveEffect.play();
            zoom(1);
            this.dispatchEvent(new Event(EVENT_SCALE_UPDATED));
        }
        
        public function zoomIn():void 
        {
            setDefaultRegistrationPoint();
            zoom(zoomEffect.zoomHeightTo + zoomIncrement);
        }
        
        public function zoomOut():void 
        {
            setDefaultRegistrationPoint()
            zoom(zoomEffect.zoomHeightTo - zoomIncrement);
        }
        
        public function zoom(factor:Number):void
        {
            if ( !_isAnimating )
            {
                _isAnimating = true;
                if ( zoomEffect.isPlaying )
                {
                    zoomEffect.end();
                }
                
                zoomEffect.zoomHeightTo = Math.max(factor, minScale);
                zoomEffect.zoomWidthTo = Math.max(factor, minScale);
                
                zoomEffect.play();
                this.dispatchEvent(new Event(EVENT_SCALE_UPDATED));
            }
        }
        
        public function recenterImage():void
        {
            image.x = (this.width - image.contentWidth)/2;
            image.y = (this.height - image.contentHeight)/2;
        }
        
        private function onEffectEnd():void 
        {
            _isAnimating = false;
            if( image.x > this.width - _borderSize )
            {
                image.x = this.width - _borderSize;
            }
            else if( image.x < _borderSize - image.width )
            {
                image.x = _borderSize - image.width;
            }
            
            if( image.y > this.height - _borderSize )
            {
                image.y = this.height - _borderSize;
            }
            else if( image.y < _borderSize-image.height )
            {
                image.y = _borderSize - image.height;
            } 
        }
        
        private function imageComplete():void
        {
            this.dispatchEvent(new Event(EVENT_SCALE_UPDATED));
            recenterImage();
        }
        
        public function set source(value:Object):void
        {
            if (value != null && value != _source)
            {
                image.scaleX = 1;
                image.scaleY = 1;
                image.x = 0;
                image.y = 0;
                _source = value;
                this.dispatchEvent(new Event(EVENT_SCALE_UPDATED));
            }    
        }
        
        public function get source():Object
        {
            return _source;
        }
        
        [Bindable("scaleUpdated")]
        public function get scale():Number
        {
            return zoomEffect.zoomHeightTo;
        }
        
        public function get content():DisplayObject
        {
            return image.content;
        }
        
    ]]>
    </mx:Script>
    

	<mx:Zoom id="zoomEffect" 
	    zoomHeightTo="1" zoomWidthTo="1" 
	    duration="{zoomDuration}" 
	    target="{image}" 
	    effectEnd="onEffectEnd()" 
	    easingFunction="{zoomEasingFunction}" />

	<mx:Move id="moveEffect" 
	    duration="{moveDuration}" 
	    target="{image}" 
	    easingFunction="{moveEasingFunction}" />

	<mx:Fade id="fadeInEffect" 
	    duration="{fadeDuration}" 
	    alphaTo="1" 
	    easingFunction="{fadeEasingFunction}" />        

        
    <mx:Canvas id="maskCanvas" 
        backgroundColor="#FF0000" 
        width="100%" height="100%" />
            
    <mx:Image id="image" 
        source="{_source}" 
        mask="{maskCanvas}" 
        showEffect="{fadeInEffect}" 
        mouseDown="image.startDrag()"
        doubleClickEnabled="true" 
        doubleClick="onDoubleClick()"
        visible="{_source != null}"
        complete="imageComplete()" />
    
</mx:Canvas>

